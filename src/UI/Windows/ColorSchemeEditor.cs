
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.15.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace TerminalGuiDesigner.UI.Windows; 
using System;
using Terminal.Gui;
using Attribute = Terminal.Gui.Attribute;

/// <summary>
/// Editor for a <see cref="ColorScheme"/>.
/// </summary>
public partial class ColorSchemeEditor {
    
    class MutableColorScheme
    {
        public Attribute Disabled { get; set; }
        public Attribute Focus { get; set; }
        public Attribute HotFocus { get; set; }
        public Attribute HotNormal { get; set; }
        public Attribute Normal { get; set; }

        internal ColorScheme ToColorScheme()
        {
            return new ColorScheme
            {
                Normal = Normal,
                HotNormal = HotNormal,
                Focus = Focus,
                HotFocus = HotFocus,
                Disabled = Disabled,
            };
        }
    }
    /// <summary>
    /// All colors to use in all <see cref="View"/> states (focused, normal etc).
    /// </summary>
    public ColorScheme Result => _result.ToColorScheme();

    MutableColorScheme _result;

    /// <summary>
    /// True if dialog was closed without clicking Ok (e.g. Cancel or Ctrl+Q).
    /// </summary>
    public bool Cancelled { get; set; } = true;

    /// <summary>
    /// Creates a new instance of the <see cref="ColorSchemeEditor"/> class.
    /// </summary>
    /// <param name="scheme"></param>
    public ColorSchemeEditor(ColorScheme scheme) {
        InitializeComponent();

        _result = Clone(scheme);

        SetColorPatches();

        btnEditNormal.Accepting += (s, e)=>{
            _result.Normal = PickNewColorsFor(Result.Normal);
            SetColorPatches();
            };


        btnEditHotNormal.Accepting += (s, e)=>{
            _result.HotNormal = PickNewColorsFor(Result.HotNormal);
            SetColorPatches();
            };


        btnEditFocus.Accepting += (s, e)=>{
            _result.Focus = PickNewColorsFor(Result.Focus);
            SetColorPatches();
            };


        btnEditHotFocus.Accepting += (s, e)=>{
            _result.HotFocus = PickNewColorsFor(Result.HotFocus);
            SetColorPatches();
            };


        btnEditDisabled.Accepting += (s, e)=>{
            _result.Disabled = PickNewColorsFor(Result.Disabled);
            SetColorPatches();
            };

        btnCancel.Accepting += (s, e)=>{
            Cancelled = true;
            Application.RequestStop();
        };

        btnOk.Accepting += (s, e)=>{
            Cancelled = false;
            Application.RequestStop();
        };
        
    }

    private MutableColorScheme Clone(ColorScheme scheme)
    {
        return new MutableColorScheme
        {
            Normal = new Attribute(scheme.Normal.Foreground,scheme.Normal.Background),
            HotNormal = new Attribute(scheme.HotNormal.Foreground,scheme.HotNormal.Background),
            Focus = new Attribute(scheme.Focus.Foreground,scheme.Focus.Background),
            HotFocus = new Attribute(scheme.HotFocus.Foreground,scheme.HotFocus.Background),
            Disabled = new Attribute(scheme.Disabled.Foreground,scheme.Disabled.Background),
        };
    }

    private Terminal.Gui.Attribute PickNewColorsFor(Terminal.Gui.Attribute current)
    {
        var pick = new Windows.ColorPicker(current);
        Application.Run(pick);

        return pick.Cancelled ? current : (Attribute?)pick.Result ?? current;
    }

    private void SetColorPatches()
    {
        SetColor(lblBackgroundNormal,Result.Normal.Background);
        SetColor(lblForegroundNormal,Result.Normal.Foreground);

        SetColor(lblBackgroundHotNormal,Result.HotNormal.Background);
        SetColor(lblForegroundHotNormal,Result.HotNormal.Foreground);

        SetColor(lblBackgroundFocus,Result.Focus.Background);
        SetColor(lblForegroundFocus,Result.Focus.Foreground);

        SetColor(lblBackgroundHotFocus,Result.HotFocus.Background);
        SetColor(lblForegroundHotFocus,Result.HotFocus.Foreground);

        SetColor(lblBackgroundDisabled,Result.Disabled.Background);
        SetColor(lblForegroundDisabled,Result.Disabled.Foreground);
    }

    private void SetColor(Label label, Color color)
    {
        label.ColorScheme = new ColorScheme{Normal = new Terminal.Gui.Attribute(color,color)};
    }
}
