//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using JetBrains.Annotations;

namespace TerminalGuiDesigner.UI.Windows;

using Terminal.Gui;
using System.Linq;
using TerminalGuiDesigner;
using TerminalGuiDesigner.ToCode;
using TerminalGuiDesigner.UI.Windows;

/// <summary>
/// Editor for the <see cref="Pos"/> type.
/// </summary>
public partial class PosEditor : Dialog, IValueGetterDialog {

    private Design design;

    /// <summary>
    /// Users configured <see cref="Pos"/> (assembled from radio button
    /// selected and text values entered - offset etc).
    /// </summary>
    [CanBeNull]
    public object Result { get; private set; }

    /// <summary>
    /// True if user cancelled the dialog instead of hitting Ok.
    /// </summary>
    public bool Cancelled { get; private set; }

    /// <summary>
    /// Prompt user to create a new <see cref="Pos"/> value to populate
    /// on <paramref name="design"/> with.
    /// </summary>
    /// <param name="design">What to set the value on.</param>
    /// <param name="oldValue">The current value for the property.</param>
    public PosEditor(Design design, Pos oldValue) {
        InitializeComponent();
        
        this.design = design;

        Title = "Pos Designer";
        Border.BorderStyle = LineStyle.Double;

        rgPosType.KeyDown += RgPosType_KeyPress;

        btnOk.Accepting += BtnOk_Clicked;
        btnCancel.Accepting += BtnCancel_Clicked;
        Cancelled = true;
        Modal = true;

        var siblings = design.GetSiblings().ToListObs();

        ddRelativeTo.SetSource(siblings);
        ddSide.SetSource(Enum.GetValues(typeof(Side)).Cast<Enum>().ToListObs());

        var val = oldValue;
        if(val.GetPosType(siblings,out var type,out var value,out var relativeTo,out var side, out var offset))
        {
            switch(type)
            {
                case PosType.Absolute:
                    rgPosType.SelectedItem = 0;
                    break;
                case PosType.Percent:
                    rgPosType.SelectedItem = 1;
                    break;
                case PosType.Relative:
                    rgPosType.SelectedItem = 2;
                    if(relativeTo != null)
                        ddRelativeTo.SelectedItem = siblings.IndexOf(relativeTo);
                    ddSide.SelectedItem = (int)side;
                    break;
                case PosType.Center:
                    rgPosType.SelectedItem = 3;                        
                    break;
                case PosType.AnchorEnd:
                    rgPosType.SelectedItem = 4;
                    break;
            }

            tbValue.Text = value.ToString("G5");
            tbOffset.Text = offset.ToString();
        }

        SetupForCurrentPosType();

        rgPosType.SelectedItemChanged += DdType_SelectedItemChanged;

    }

    private void RgPosType_KeyPress(object sender, Key key)
    {
        var c = (char)key;
        
        // if user types in some text change the focus to the text box to enable entering digits
        if ((key == Key.Backspace || char.IsDigit(c)) && tbValue.Visible)
        {
            tbValue?.FocusDeepest(NavigationDirection.Forward,TabBehavior.TabStop);
        }            
    }

    private void DdType_SelectedItemChanged(object sender, SelectedItemChangedArgs obj)
    {
        SetupForCurrentPosType();            
    }

    private void SetupForCurrentPosType()
    {
        
        switch(GetPosType())
        {
            case PosType.Percent:
                lblRelativeTo.Visible = false;
                ddRelativeTo.Visible = false;
                lblSide.Visible = false;
                ddSide.Visible = false;
                
                lblValue.Y = 1;
                lblValue.Visible = true;
                tbValue.Visible = true;
                
                lblOffset.Y = 3;
                lblOffset.Visible = true;
                
                tbOffset.Y = 3;
                tbOffset.Visible = true;

                SetNeedsDraw();
                break;
            case PosType.Center:
                lblRelativeTo.Visible = false;
                ddRelativeTo.Visible = false;
                lblSide.Visible = false;
                ddSide.Visible = false;
                
                lblValue.Visible = false;
                tbValue.Visible = false;
                
                lblOffset.Y = 1;
                lblOffset.Visible = true;
                tbOffset.Y = 1;
                tbOffset.Visible = true;

                SetNeedsDraw();
                break;
            case PosType.Absolute:
            case PosType.AnchorEnd:
                ddRelativeTo.Visible = false;
                lblRelativeTo.Visible = false;
                lblSide.Visible = false;
                ddSide.Visible = false;

                lblValue.Y = 1;
                lblValue.Visible = true;
                tbValue.Visible = true;

                lblOffset.Visible = false;
                tbOffset.Visible = false;
                SetNeedsDraw();
                break;
            case PosType.Relative:
                lblRelativeTo.Y = 1;
                lblRelativeTo.Visible = true;
                ddRelativeTo.Y = 1;
                ddRelativeTo.Visible = true;

                lblSide.Y = 3;
                lblSide.Visible = true;

                ddSide.IsInitialized = false;
                ddSide.Y = 3;
                ddSide.Visible = true;
                ddSide.IsInitialized = true;

                lblValue.Visible = false;
                tbValue.Visible = false;

                lblOffset.Y = 5;
                lblOffset.Visible = true;
                tbOffset.Y = 5;
                tbOffset.Visible = true;
                SetNeedsDraw();
                break;

            default: throw new ArgumentOutOfRangeException();
        }
    }

    private void BtnCancel_Clicked(object sender, EventArgs e)
    {
        Cancelled = true;
        Application.RequestStop();
    }

    private void BtnOk_Clicked(object sender, EventArgs e)
    {
        if(GetPosType() == PosType.AnchorEnd && GetValue(out var value) && value <=0)
        {
            if (!ChoicesDialog.Confirm("Anchor Without Margin", "Using AnchorEnd without a margin will result in a point outside of parent bounds.\nAre you sure?"))
            {
                return;
            }   
        }

        Cancelled = !BuildPos(out var result);
        Result = result;
        Application.RequestStop();
    }

    private bool BuildPos(out Pos result)
    {
        // pick what type of Pos they want
        var type = GetPosType();

        switch (type)
        {
            case PosType.Absolute:
                return BuildPosAbsolute(out result);
            case PosType.Relative:
                return BuildPosRelative(out result);
            case PosType.Percent:
                return BuildPosPercent(out result);
            case PosType.Center:
                return BuildPosCenter(out result);
            case PosType.AnchorEnd:
                return BuildPosAnchorEnd(out result);

            default: throw new ArgumentOutOfRangeException();

        }
    }

    private PosType GetPosType()
    {
        return Enum.Parse<PosType>(rgPosType.RadioLabels[rgPosType.SelectedItem].ToString());
    }


    private Side? GetSide()
    {
        return ddSide.SelectedItem == -1 ? null : (Side)ddSide.Source.ToList()[ddSide.SelectedItem];
    }

    private bool GetOffset(out int offset)
    {
        // blank text box counts as 0
        if(string.IsNullOrWhiteSpace(tbOffset.Text.ToString()))
        {
            offset = 0;
            return true;
        }

        if (int.TryParse(tbOffset.Text.ToString(), out offset))
        {
            return true;
        }
        else
        {
            offset = 0;
            return false;
        }
    }

    private bool BuildPosRelative(out Pos result)
    {
        var relativeTo = ddRelativeTo.SelectedItem == -1 ? null : ddRelativeTo.Source.ToList()[ddRelativeTo.SelectedItem] as Design;

        if (relativeTo != null)
        {
            var side = GetSide();

            if (side != null)
            {
                GetOffset(out int offset);

                result = PosExtensions.CreatePosRelative(relativeTo, side.Value,offset);
                return true;
            }
        }

        // Its got no side or no relative to control
        result = null;
        return false;
    }

    private bool BuildPosAbsolute(out Pos result)
    {
        if (GetValue(out int newPos))
        {
            result = Pos.Absolute(newPos);
            return true;
        }

        result = null;
        return false;
    }

    private bool BuildPosAnchorEnd(out Pos result)
    {
        if (GetValue(out int newPos))
        {
            result = Pos.AnchorEnd(newPos);
            return true;
        }

        result = null;
        return false;
    }

    private bool GetValue(out int newPos)
    {
        // blank text box counts as 0
        if(string.IsNullOrWhiteSpace(tbValue.Text.ToString()))
        {
            newPos = 0;
            return true;
        }

        return int.TryParse(tbValue.Text.ToString(),out newPos);
    }

    private bool BuildPosPercent(out Pos result)
    {
        if (GetValue(out int newPercent))
        {
            result = Pos.Percent(newPercent);

            if (GetOffset(out int offset) && offset != 0)
            {
                result = result + offset;
                return true;
            }

            return true;
        }

        result = null;
        return false;
    }
    private bool BuildPosCenter(out Pos result)
    {
        result = Pos.Center();

        if (GetOffset(out int offset) && offset != 0)
        {
            result = result + offset;
            return true;
        }

        return true;
    }
}
