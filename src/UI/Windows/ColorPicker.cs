//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Terminal.Gui;
using Attribute = Terminal.Gui.Attribute;

namespace TerminalGuiDesigner.UI.Windows;

/// <summary>
/// Prompts user to pick a two <see cref="Color"/> to make an <see cref="Attribute"/>.
/// </summary>
public partial class ColorPicker : IValueGetterDialog
{
    /// <summary>
    /// The combination of foreground and background <see cref="Color"/> the user chose.
    /// </summary>
    public object Result { get; internal set; }

    /// <summary>
    /// True if user closed dialog with cancel.
    /// </summary>
    public bool Cancelled { get; internal set; }

    /// <summary>
    /// Creates a new instance of the <see cref="ColorPicker"/> class.
    /// </summary>
    /// <param name="currentValue"></param>
    public ColorPicker(Attribute? currentValue)
    {
        InitializeComponent();

        if (currentValue != null)
        {
            cpForeground.SelectedColor = currentValue.Value.Foreground;
            cpBackground.SelectedColor = currentValue.Value.Background;
        }

        lblPreview.ColorScheme = new ColorScheme();
        UpdatePreview();

        cpForeground.ColorChanged += (s,e) => UpdatePreview();
        cpBackground.ColorChanged += (s,e) => UpdatePreview();

        btnOk.Accepting += (s, e) =>
        {
            e.Cancel = true;
            Ok();
        };
        btnCancel.Accepting += (s, e) => { e.Cancel = true; Cancel(); };
    }

    private void Ok()
    {
        Cancelled = false;
        Result = GetColor();
        Application.RequestStop();
    }
    private void Cancel()
    {
        Cancelled = true;
        Result = null;
        Application.RequestStop();
    }

    private void UpdatePreview()
    {
        lblPreview.ColorScheme = new ColorScheme(GetColor());
        lblPreview.SetNeedsDraw();
    }
    
    private Attribute GetColor()
    {
        return new Attribute(new Color(cpForeground.SelectedColor),new Color(cpBackground.SelectedColor));
    }
}