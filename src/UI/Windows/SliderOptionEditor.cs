
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------


namespace TerminalGuiDesigner.UI.Windows {
    using System.Reflection;
    using System.Text;
    using Terminal.Gui;
    
    
    public partial class SliderOptionEditor : IValueGetterDialog
    {
        private readonly Type genericTypeArgument;
        private readonly Type sliderOptionType;

        /// <summary>
        /// True if the dialog was canceled before completing
        /// </summary>
        public bool Cancelled { get; internal set; } = true;
        
        /// <summary>
        /// The resulting value as configured by the user
        /// </summary>
        public object Result { get; internal set; }

        /// <summary>
        /// Creates a new instance of the Designer to create an instance of <see cref="SliderOption{T}"/>
        /// where T is of <see cref="Type"/> <paramref name="genericTypeArgument"/>.
        /// </summary>
        /// <param name="genericTypeArgument">The T Type of the <see cref="SliderOption{T}"/> you want to design</param>
        /// <param name="oldValue">Previous value (if editing an existing instance).</param>
        public SliderOptionEditor(Type genericTypeArgument, object? oldValue) {
            InitializeComponent();

            this.genericTypeArgument = genericTypeArgument;
            this.sliderOptionType = typeof(SliderOption<>).MakeGenericType(this.genericTypeArgument);

            btnOk.Accepting += BtnOk_Clicked;
            btnCancel.Accepting += BtnCancel_Clicked;

            lblType.Text = $"({genericTypeArgument.Name})";

            if(oldValue != null)
            {
                var p = sliderOptionType.GetProperty("Legend");
                tfLegend.Text = (string)p.GetValue(oldValue);

                p = sliderOptionType.GetProperty("LegendAbbr");
                tfLegendAbbr.Text = ((Rune)p.GetValue(oldValue)).ToString();

                p = sliderOptionType.GetProperty("Data");

                if (this.genericTypeArgument == typeof(string))
                {
                    tfData.Text = (string)p.GetValue(oldValue);
                }
                else
                {
                    tfData.Text = p.GetValue(oldValue)?.ToString() ?? "";
                }
            }
        }

        private void BtnCancel_Clicked(object sender, CommandEventArgs e)
        {
            e.Cancel = true;
            this.Cancelled = true;
            Application.RequestStop();
        }

        private void BtnOk_Clicked(object sender, CommandEventArgs e)
        {
            e.Cancel = true;
            try
            {
                this.BuildResult();
            }
            catch(Exception ex)
            {
                ExceptionViewer.ShowException("Could not build result", ex);
                return;
            }

            this.Cancelled = false;
            Application.RequestStop();
        }

        private void BuildResult()
        {
            Result = Activator.CreateInstance(sliderOptionType);

            var p = sliderOptionType.GetProperty("Legend");
            p.SetValue(Result, tfLegend.Text);

            p = sliderOptionType.GetProperty("LegendAbbr");
            p.SetValue(Result, new Rune(tfLegendAbbr.Text[0]));

            p = sliderOptionType.GetProperty("Data");

            if(this.genericTypeArgument == typeof(string))
            {
                p.SetValue(Result, tfData.Text);
            }
            else
            {
                p.SetValue(Result, Convert.ChangeType(tfData.Text, this.genericTypeArgument));
            }

        }
    }
}
